{"version":3,"sources":["webpack:///webpack/bootstrap 7f84d40abdf67e47b11d","webpack:///./lib/util.js","webpack:///./lib/nectar.js","webpack:///./lib/player.js","webpack:///./lib/viewport.js","webpack:///./lib/world.js","webpack:///./lib/flawk.js","webpack:///./lib/rectangle.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;ACjBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,uCAAuC,QAAQ;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA,mBAAmB,yBAAyB;AAC5C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;;;;;;;;AC9IA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;ACvDA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,mBAAmB,UAAU;AAC7B;AACA,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;;;;;;;;;;;;ACvDA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;AAIA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,CAAC;;;;;;;;;;AC1KD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 7f84d40abdf67e47b11d","\n\n\nexport function dist(pos1, pos2) {\n  return Math.sqrt(\n    Math.pow(pos1[0] - pos2[0], 2) + Math.pow(pos1[1] - pos2[1], 2)\n  );\n}\n\nexport function randomPos(width, height) {\n  const x = Math.random() * width;\n  const y = Math.random() * height;\n  return [x, y];\n}\n\nexport function getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/util.js\n// module id = 0\n// module chunks = 0","import * as Util from './util';\n\nclass Nectar {\n  constructor(x, y, color) {\n    this.x = x;\n    this.y = y;\n    this.radius = Util.getRandomInt(3,8);\n    this.color = color;\n  }\n\n  relocate(width, height) {\n    this.x = Util.getRandomInt(1, width);\n    this.y = Util.getRandomInt(1, height);\n    console.log(this.x, this.y);\n  }\n\n  draw(context, xView, yView) {\n    context.save();\n    context.beginPath();\n    context.fillStyle = \"#9850FF\";\n    context.fillStyle = this.color;\n    context.strokeStyle = \"#000\";\n    context.lineWidth = 1;\n    context.arc(this.x+this.radius - xView, this.y+this.radius - yView, this.radius, 0, Math.PI * 2, false);\n    context.fill();\n    context.restore();\n  }\n}\n\nexport default Nectar;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/nectar.js\n// module id = 1\n// module chunks = 0","\n\nclass Player {\n  constructor(x, y, size, color) {\n    this.x = x;\n    this.y = y;\n    this.size = size\n    this.color = color;\n\n    this.velX = 0\n    this.velY = 0\n\n    this.speedMultiplier = 3;\n\n    this.width = 50;\n    this.height = 50;\n\n    this.boosting = false;\n    this.count = 0;\n\n    this.radius = 15;\n    this.zombies = [];\n    for (let i = 0; i < this.size; i++) {\n      this.zombies.push([this.x, this.y])\n    }\n\n  }\n\n\n  drawSegment(context, xPos, yPos, stroke) {\n    context.save();\n    context.beginPath();\n    context.fillStyle = this.color;\n    context.strokeStyle = \"#000\";\n    context.lineWidth = 1;\n    context.arc(xPos + this.radius, yPos + this.radius , this.radius, 0, Math.PI * 2, false);\n    context.fill();\n    if (stroke === true) {\n      context.stroke();\n    }\n    context.restore();\n  }\n\n  grow() {\n    const lastZombie = this.zombies[this.size-1]\n    this.zombies.push([lastZombie[0], lastZombie[1]]);\n    this.size += 1;\n    this.radius += 0.01;\n  }\n\n  shrink() {\n    if (this.count === 20) {\n      this.zombies.pop();\n      this.size -= 1;\n      this.count = 0;\n    }\n    this.count += 1;\n    this.radius -= 0.01;\n  }\n\n\n  draw(context, xView, yView) {\n    for (let i = this.zombies.length-1; i >= 0; i--) {\n      if (i % 4 === 0) {\n        const zombie = this.zombies[i];\n        const zxPos = zombie[0] - this.radius - xView;\n        const zyPos = zombie[1] - this.radius - yView;\n        this.drawSegment(context, zxPos, zyPos, true)\n      }\n      // const zombie = this.zombies[i];\n      // const zxPos = zombie[0] - this.radius - xView;\n      // const zyPos = zombie[1] - this.radius - yView;\n      // this.drawSegment(context, zxPos, zyPos, true)\n    }\n\n    const xPos = (this.x - this.radius) - xView;\n    const yPos = (this.y - this.radius) - yView;\n\n    this.drawSegment(context, xPos, yPos, true);\n  }\n\n  update(velocityScale, worldWidth, worldHeight) {\n\n    let startX = this.x;\n    let startY = this.y;\n\n    for (let i = 0; i < this.zombies.length; i++) {\n      let zX = this.zombies[i][0];\n      let zY = this.zombies[i][1];\n\n      // console.log(change);\n      this.zombies[i][0] = startX;\n      this.zombies[i][1] = startY;\n      startX = zX;\n      startY = zY;\n    }\n\n    this.x += (this.velX * velocityScale) * this.speedMultiplier;\n    this.y += (this.velY * velocityScale) * this.speedMultiplier;\n\n    if (this.x - this.radius < 0) {\n      this.x = this.radius;\n    }\n    if (this.y - this.radius < 0) {\n      this.y = this.radius;\n    }\n    if (this.x + this.radius > worldWidth) {\n      this.x = worldWidth - this.radius;\n    }\n    if (this.y + this.radius > worldHeight) {\n      this.y = worldHeight - this.radius;\n    }\n\n    if (this.boosting) {\n      this.shrink();\n    }\n  }\n\n  boost() {\n    this.speedMultiplier = 4;\n    this.boosting = true;\n  }\n\n  unboost() {\n    this.speedMultiplier = 3;\n    this.boosting = false;\n  }\n\n  changeXVel(x) {\n    this.velX = x;\n  }\n\n  changeYVel(y) {\n    this.velY = y;\n  }\n\n  changeBoost(speed) {\n    this.speedMultiplier = speed;\n  }\n\n}\n\nexport default Player;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/player.js\n// module id = 2\n// module chunks = 0","import Rectangle from './rectangle';\n\nclass Viewport {\n  constructor(xView, yView, canvasWidth, canvasHeight, worldWidth, worldHeight) {\n    this.xView = xView || 0;\n    this.yView = yView || 0;\n\n    // distance from followed object to border before camera starts to move\n    this.xDeadZone = 0;\n    this.yDeadZone = 0;\n\n    // viewport dimensions\n    this.wView = canvasWidth;\n    this.hView = canvasHeight;\n\n    this.followed = null;\n\n    this.worldWidth = worldWidth;\n    this.worldHeight = worldHeight;\n\n  }\n\n  follow(gameObject, xDeadZone, yDeadZone) {\n    this.followed = gameObject;\n    this.xDeadZone = xDeadZone;\n    this.yDeadZone = yDeadZone;\n  }\n\n  update() {\n    if ((this.followed.x - this.xView + this.xDeadZone) > this.wView) {\n      this.xView = this.followed.x - (this.wView - this.xDeadZone);\n    } else if (this.followed.x - this.xDeadZone < this.xView) {\n      this.xView = this.followed.x - this.xDeadZone;\n    }\n\n    if ((this.followed.y - this.yView + this.yDeadZone) > this.hView) {\n      this.yView = this.followed.y - (this.hView - this.yDeadZone);\n    } else if (this.followed.y - this.yDeadZone < this.yView) {\n      this.yView = this.followed.y - this.yDeadZone;\n    }\n\n    if (this.xView < 0) {\n      this.xView = 0\n    }\n    if (this.yView < 0) {\n      this.yView = 0\n    }\n    if (this.xView + this.wView > this.worldWidth) {\n      this.xView = this.worldWidth - this.wView;\n    }\n    if (this.yView + this.hView > this.worldHeight) {\n      this.yView = this.worldHeight - this.hView;\n    }\n    // }\n  }\n}\n\nexport default Viewport;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/viewport.js\n// module id = 3\n// module chunks = 0","\n\nclass World {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n  }\n\n  generate() {\n    let ctx = document.createElement(\"canvas\").getContext(\"2d\");\n    ctx.canvas.width = this.width;\n    ctx.canvas.height = this.height;\n\n    const rows = ~~(this.width/88) + 1;\n    const columns = ~~(this.height/88) + 1;\n\n    ctx.fillStyle = \"#070B0F\";\n    ctx.fillRect(0, 0, this.width, this.height);\n\n    ctx.save();\n\n    for (let x = 0; x < rows; x++) {\n      ctx.beginPath();\n      for (let y = 0; y < columns; y++) {\n        ctx.rect(x*88, y*88, 84, 84);\n      }\n      ctx.fillStyle = \"#23292E\";\n      ctx.fill();\n      ctx.closePath();\n    }\n\n    ctx.restore();\n\n    this.image = new Image();\n    this.image.src = ctx.canvas.toDataURL(\"image/png\");\n\n    ctx = null;\n  }\n\n  draw(context, xView, yView) {\n    context.drawImage(\n      this.image,\n      0,\n      0,\n      this.image.width,\n      this.image.height,\n      -xView,\n      -yView,\n      this.image.width,\n      this.image.height\n    );\n  }\n}\n\n\nexport default World;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/world.js\n// module id = 4\n// module chunks = 0","import World from './world';\nimport Player from './player';\nimport Viewport from './viewport';\nimport Nectar from './nectar';\nimport * as Util from './util';\n\n\nclass Game {\n  constructor(canvas) {\n    this.canvas = canvas;\n    this.context = this.canvas.getContext(\"2d\");\n    this.world = new World(5000, 5000);\n    this.player = new Player(50, 50, 75, this.randomColor());\n    this.viewport = new Viewport(0, 0, this.canvas.width, this.canvas.height, this.world.width, this.world.height);\n    this.nectar = []\n    this.nectarCount = 700;\n    this.setup();\n  }\n\n\n  setup() {\n    setTimeout(() => {\n      this.handleInput();\n    }, 3000);\n    this.world.generate();\n    this.viewport.follow(this.player, this.canvas.width / 2, this.canvas.height / 2);\n    this.populate();\n\n\n  }\n\n  randomColor() {\n    const colors = ['#9850FF', '#FE5F5C', '#FF5EAE', '#69FE60', '#5EFFE5', '#FEFB5B', '#695DFE', '#EDA14B'];\n    return colors[Math.floor(Math.random() * colors.length)]\n  }\n\n  populate() {\n    for (let i = 0; i < this.nectarCount; i++) {\n      const x = Util.getRandomInt(1, this.world.width);\n      const y = Util.getRandomInt(1, this.world.height);\n      const color = this.randomColor();\n      this.nectar.push(new Nectar(x ,y, color))\n    }\n  }\n\n  update(delta) {\n    const normal_frame_time = 1000/60;\n    const velocityScale = delta / normal_frame_time\n\n    this.player.update(velocityScale, this.world.width, this.world.height);\n    this.viewport.update();\n    this.handleCollisions();\n  }\n\n  draw() {\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.world.draw(this.context, this.viewport.xView, this.viewport.yView);\n\n    this.nectar.forEach((nectar) => nectar.draw(this.context, this.viewport.xView, this.viewport.yView))\n    // this.nectar.draw(this.context, this.viewport.xView, this.viewport.yView);\n    this.player.draw(this.context, this.viewport.xView, this.viewport.yView);\n  }\n\n\n\n  handleCollisions() {\n    this.nectar.forEach((nectar) => {\n      const centerDist = Util.dist([this.player.x, this.player.y], [nectar.x, nectar.y]);\n      if (centerDist < (this.player.radius)) {\n        nectar.relocate(this.world.width, this.world.height);\n        for (let i = 0; i < nectar.radius / 3; i++) {\n          this.player.grow();\n        }\n      }\n    })\n  }\n\n  start() {\n    this.requestId = window.requestAnimationFrame(this.gameLoop.bind(this));\n  }\n\n  gameLoop(time) {\n    if (!this.lastTime) {\n      this.lastTime = time;\n    }\n\n    const delta = -(this.lastTime - time);\n\n    this.update(delta);\n    this.draw();\n\n    this.lastTime = time;\n    this.requestId = window.requestAnimationFrame(this.gameLoop.bind(this))\n  }\n\n  handleInput() {\n    document.addEventListener(\"keydown\", (e) => {\n      if (e.key === \" \") {\n        // this.player.changeBoost(4);\n        this.player.boost();\n      }\n    });\n\n    document.addEventListener(\"keyup\", (e) => {\n      if (e.key === \" \") {\n        // this.player.changeBoost(3);\n        this.player.unboost();\n      }\n    });\n\n    document.addEventListener('mousedown', (e) => {\n      e.preventDefault();\n      this.player.changeBoost(4);\n    });\n\n    document.addEventListener('mouseup', (e) => {\n      e.preventDefault();\n      this.player.changeBoost(3);\n    })\n\n    document.addEventListener('mousemove', (e) => {\n      e.preventDefault();\n\n      const slopeToDegrees = (x, y) => {\n        return Math.atan2(y, x) / (Math.PI / 180)\n      }\n\n      const newVector = (degrees) => {\n        const x = Math.sin(degrees * (Math.PI / 180))\n        const y = Math.cos(degrees * (Math.PI / 180))\n        return [y, x]\n      }\n\n      // top-left coordinates of the canvas on the document\n      const canvasCoords = this.canvas.getBoundingClientRect();\n\n      // the 'origin' -> coordinates of the player relative to the top-left corner of the canvas\n      const oX = canvasCoords.left + (this.player.x - this.viewport.xView);\n      const oY = canvasCoords.top + (this.player.y - this.viewport.yView);\n\n      // coordinates of mouse position on document\n      const mX = e.clientX;\n      const mY = e.clientY;\n\n      // difference between mouse coords and origin coords\n      const dX = (mX - oX);\n      const dY = (mY - oY);\n\n      // const slope = calcSlope(oX, oY, mX, mY);\n      const degrees = slopeToDegrees(dX, dY);\n\n\n      // const [newX, newY] = newVector(degrees)\n      const [newX, newY] = newVector(degrees);\n      this.player.changeXVel(newX);\n      this.player.changeYVel(newY);\n    });\n  }\n}\n\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const canvas = document.getElementById(\"game-canvas\");\n  const game = new Game(canvas);\n\n  game.start();\n\n  // const canvas = document.getElementById(\"game-canvas\");\n  // const game = new Game(canvas);\n  // game.start();\n\n})\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/flawk.js\n// module id = 5\n// module chunks = 0","\n\nclass Rectangle {\n  constructor(left = 0, top = 0, width = 0, height = 0) {\n    this.left = left;\n    this.top = top;\n    this. width = width;\n    this.height = height;\n\n    this.right = this.left + this.width;\n    this.bottom = this.top + this.height;\n  }\n\n  set(left, top, width, height) {\n    this.left = left\n    this.top = top;\n    this.width = width || this.width;\n    this.height = height || this.height;\n\n    this.right = this.left + this.width;\n    this.bottom = this.top + this.height;\n  }\n\n  within(r) {\n    return (r.left <= this.left && r.right >= this.right &&\n              r.top <= this.top && r.bottom >= this.bottom);\n  }\n\n  overlaps(r) {\n    return (this.left < r.right && r.left < this.right &&\n              this.top < r.bottom && r.top < this.bottom);\n  }\n}\n\nexport default Rectangle;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/rectangle.js\n// module id = 6\n// module chunks = 0"],"sourceRoot":""}